@page "/Character/Create"
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IRpgClassService rpgClassService
@inject BlazorRPG.Client.Services.ICharacterService characterService
@using BlazorRPG.Shared;
@using Tewr.Blazor.FileReader;
@inject IFileReaderService filereader  
@using System.IO;
@inject HttpClient client; 
@using BlazorInputFile;
@inject IJSRuntime jsruntime


<h3><strong>Adaugare de caracter...</strong></h3>

<AuthorizeView Context="authContext">
    <Authorized>
        <EditForm Context="formContext" Model="addCharacterModel" OnValidSubmit="HandleCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Name">Nume</label>
                <InputText @bind-Value="addCharacterModel.Name" class="form-control" id="Nume" />
            </div>
            <div class="form-group">
                <label for="Points">Puncte</label>
                <InputNumber @bind-Value="addCharacterModel.Points" class="form-control" id="Points" />
            </div>
            <div class="form-group">
                <label for="Strength">Strength</label>
                <InputNumber @bind-Value="addCharacterModel.Strength" class="form-control" id="Strength" />
            </div>
            <div class="form-group">
                <label for="Inteligence">Inteligenta</label>
                <InputNumber @bind-Value="addCharacterModel.Inteligence" class="form-control" id="Inteligence" />
            </div>
            <div class="form-group">
                <label for="RpgClassId">ClasaRPG</label>
                <select @bind="addCharacterModel.RPGClassId" class="form-control" id="RPGClassId">
                    <option value="">--Selectare clasa--</option>
                    @if (RpgClase != null)
                    {
                        @foreach (var rpg in RpgClase)
                        {
                            <option value="@rpg.Id">@rpg.NumeRpg</option>
                        }
                    }

                </select>
            </div>
            <div class="form-group">
                <label for="bookcover">Fisier tip PDF</label>
                <Input type="file" @ref="inputReference" @onchange="SelectareFisier" />
                <ul>
                    <li>Marime:@size</li>
                    <li>Nume:@type</li>
                </ul>
                @if (fileName!=string.Empty && type == "application/pdf")
                {
                    <iframe id="viewer" style="width:100%;height:200px;"></iframe>
                }               
            </div>
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-pencil"></span>
                Salvare 
            </button>
            <button @onclick="BackToList" class="btn btn-outline-secondary">
                <span class="oi oi-media-skip-backward"></span>
                Back To List
            </button>

        </EditForm>
    </Authorized>
</AuthorizeView>


@code {

    ElementReference inputReference;
    string fileName = string.Empty;
    long size ;
    string type = string.Empty;
    public Stream fileStream;


    private IFileListEntry file;
    bool isSucces = true;
    private string imageDataURL;
    bool isInvalidFileType = true;
    private MemoryStream msFile;

    private AddCharacterDto addCharacterModel = new AddCharacterDto();

    public List<RpgClass> RpgClase { get; set; } = new List<RpgClass>();
    public string clasaUrl { get; set; }

    private HubConnection hubConnection;

    async void HandleCreate()
    {
        // aici trebuie sa bag un try pentru upload si scriere in baza
        try
        {

            if (!isInvalidFileType)
            {
                bool raspunsUpload = await UploadFisier();

                if (!raspunsUpload)
                {
                    ToastService.ShowError("nu s a reusit incarcarea fisierului");
                    return;
                }
            }
            else
            {
                ToastService.ShowWarning("Fisier cu format incorect/inexistent !");
                return;
            }
            addCharacterModel.DocumentPDF = fileName;
            var result = await characterService.Create(addCharacterModel);
            if (result.Success)
            {
                var mesaj = $"A fost creat caracterul {result.Data.Name}!";
                ToastService.ShowSuccess(mesaj, result.Message);
                NavigationManager.NavigateTo("/" + clasaUrl);

                if (IsConnected) await SendMessage();
                Task SendMessage() => hubConnection.SendAsync("SyncRecord");
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {

            ToastService.ShowError("Eroare la scrierea in DB");

        }
    }

    protected override async Task OnInitializedAsync()
    {

        await rpgClassService.LoadRpgClasses();
        RpgClase = rpgClassService.RpgClasses;
        addCharacterModel.RPGClassId = 1;
        clasaUrl = RpgClase[0].Url;



        hubConnection = new HubConnectionBuilder()
             .WithUrl(NavigationManager.ToAbsoluteUri("/DataHub"))
             .Build();

        hubConnection.On("ReceiveMessage", () =>
        {


        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;



    private void BackToList()
    {
        NavigationManager.NavigateTo("/" + clasaUrl);
    }

    async Task SelectareFisier()
    {
        byte[] buffer;
        //var format = "pdf";

        var file = (await filereader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file != null)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;
            size = fileInfo.Size;
            type = fileInfo.Type;
            if (type == "application/pdf")
            {
                using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
                {
                    fileStream = new MemoryStream(ms.ToArray());
                    buffer = new byte[size];
                    var filestream2 = new MemoryStream(ms.ToArray());
                    await filestream2.ReadAsync(buffer);
                    await jsruntime.InvokeVoidAsync("downloadFile", "application/pdf", buffer, "document.pdf");
                }
                isInvalidFileType = false;


            }
            else
            {

                isInvalidFileType = true;
                ToastService.ShowWarning("Fisier incorect/inexistent!");

            }
        }

    }


    async Task<bool> UploadFisier()
    {

        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");


        content.Add(new StreamContent(fileStream, (int)fileStream.Length),"fisier",fileName);

        var response = await client.PostAsync("api/Images/UploadFile", content);
        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Incarcare fisier reusita");
            return true;
        }
        return false;
    }

    public void Dispose()
    {
        hubConnection.DisposeAsync();
    }
}
